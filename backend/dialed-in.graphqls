type Query {
  coffees(filter: CoffeeFilter): [Coffee!]!
  lastUsedCoffee: Coffee
  brews(filter: BrewFilter): [Brew!]!
  me: User!
  isUsernameAvailable(username: String!): Boolean!
}

input CoffeeFilter {
  roasterId: String
  roastDate: String
  userId: String
}

input BrewFilter {
  coffeeId: String
  brewDate: String
  userId: String
}

type Coffee {
  id: String!
  name: String!
  roaster: String
  roastDate: String
  userId: String
}

type Brew {
  id: String!
  coffee: Coffee!
  brewDate: String!
  brewNotes: String!
}

input CompleteAccountInput {
  name: String!
  username: String!
  bio: String

  # Auth
  authId: String!
  deviceName: String!
  code: String!
}

type AuthResponse {
  user: User!
  device: Device!
}


input PushTokenInput {
  token: String!
  platform: PushPlatform!
  env: TokenEnv!
}

enum PushPlatform {
  IOS
  ANDROID
  WEB
}

enum TokenEnv {
  STAGING
  PRODUCTION
}

type EmptyResponse {
  success: Boolean!
}

union AuthenticationResult = AuthResponse | EmptyResponse

type Mutation {
  initiateAuth(email: String!): String!
  validateAuth(authId: String!, deviceName: String!, code: String!): AuthenticationResult!
  completeAccount(input: CompleteAccountInput!): AuthResponse!
  setPushToken(token: PushTokenInput!): Boolean!
  logout: Boolean!
  # createCoffee(coffee: CoffeeInput!): Coffee!
  # updateCoffee(id: String!, coffee: CoffeeInput!): Coffee!
  # deleteCoffee(id: String!): Coffee!
  # createBrew(brew: BrewInput!): Brew!
  # updateBrew(id: String!, brew: BrewInput!): Brew!
  # deleteBrew(id: String!): Brew!
} 

type User {
  email: String!
  name: String!
  username: String!
  bio: String
}

type Device {
  name: String!
  sessionId: String!
}
