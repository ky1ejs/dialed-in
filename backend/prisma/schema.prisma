// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique
  username    String      @unique
  name        String
  bio         String?
  hashedEmail String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  devices     Device[]
  bags        CoffeeBag[]
}

model EmailAutheticationRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique @db.Citext
  code      String
  createdAt DateTime @default(now())
}

enum BurrType {
  CONICAL
  FLAT
}

model Grinder {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  brand              String
  supportedBurrTypes BurrType[]
  Brew               Brew[]
}

model Roaster {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String   @unique @db.Citext
  location String?
  coffees  Coffee[]
}

enum Roast {
  LIGHT
  LIGHT_MEDIUM
  MEDIUM
  MEDIUM_DARK
  DARK
  STARBUCKS_CHARCOAL
}

model Coffee {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  roast     Roast
  notes     String[]
  roaster   Roaster     @relation(fields: [roasterId], references: [id])
  roasterId String      @db.Uuid
  Brew      Brew[]
  bag       CoffeeBag[]
  upc       String?
}

enum WeightUnit {
  GRAMS
  OUNCES
}

model CoffeeBag {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weight     Int?
  weightUnit WeightUnit @default(GRAMS)
  roastDate  DateTime?  @db.Date
  userId     String     @db.Uuid
  user       User       @relation(fields: [userId], references: [id])
  coffee     Coffee     @relation(fields: [coffeeId], references: [id])
  coffeeId   String     @db.Uuid
}

model Brew {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coffee     Coffee   @relation(fields: [coffeeId], references: [id])
  coffeeId   String   @db.Uuid
  doseGrams  Float
  brewTime   Int
  waterTemp  Float
  yieldGrams Float
  grinder    Grinder  @relation(fields: [grinderId], references: [id])
  grinderId  String   @db.Uuid
  grindSize  Int
  grindRpm   Int
  machine    Machine  @relation(fields: [machineId], references: [id])
  machineId  String   @db.Uuid
  brewNotes  String
  brewDate   DateTime
}

model Machine {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String
  brand String
  type  String
  Brew  Brew[]
}

model Device {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token     PushToken?
}

enum TokenEnv {
  STAGING
  PRODUCTION
}

enum PushPlatform {
  IOS
  ANDROID
  WEB
}

model PushToken {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String
  env       TokenEnv
  platform  PushPlatform
  device    Device       @relation(fields: [device_id], references: [id], onDelete: Cascade)
  device_id String       @unique @db.Uuid
}
